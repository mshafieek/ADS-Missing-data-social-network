library(mice)     # for imputation and amputation
library(purrr)    # for functional programming
library(furrr)    # for functional futures
library(mvtnorm)  # for multivariate normal data
library(magrittr) # for pipes
library(dplyr)    # for data manipulation
library(tibble)   # for tibbles
library(relevent)
library(Epi)



################impute missing data and fill in############################

# Make a tibble from the apollo dataset
Apollo_tibble <- as_tibble(PartOfApollo_13)

#Model-based finite populations (MCAR / MAR)
mbased_finite_apollo <- list(
  MCAR = furrr::future_map(1:3, ~ { # map over 3 sims
    Apollo_tibble %>% 
      ampute(prop = .2, 
             mech = "MCAR", patterns = c(1,1,0)) %>% .$amp %>% 
      mice(m = 5, 
           maxit = 5,
           method = "pmm",
           print = F)
  }  , .options = furrr_options(seed = 123)),
  MAR = furrr::future_map(1:3, ~ { # map over 3 sims
    Apollo_tibble %>% 
      ampute(prop = .2, 
             mech = "MAR", patterns = c(1,1,0), type = "RIGHT") %>% .$amp %>% 
      mice(m = 5, 
           maxit = 5,
           method = "pmm",
           print = F)
  }, .options = furrr_options(seed = 123))
)


################MAKE SEPERATE DATSETS FROM THE SIMULATED DATA#####################

# MCAR DATASETS ################## 

#imputes missing data using 'complete' function
MCAR_imputed <- furrr::future_map(mbased_finite_apollo$MCAR, ~ complete(.x, action = "broad"))

#Creates data frames from imputed data MCAR
create_MCAR_dfs <- function(MCAR_imputed){
  
  MCAR_dfs_list <- list()
  
  for(i in seq_along(MCAR_imputed)){
    temp_df <- MCAR_imputed[[i]]
    MCAR_dfs_list[[i]] <- list(MCAR_df_1 = temp_df[, grep("\\.1$", colnames(temp_df))],
                               MCAR_df_2 = temp_df[, grep("\\.2$", colnames(temp_df))],
                               MCAR_df_3 = temp_df[, grep("\\.3$", colnames(temp_df))],
                               MCAR_df_4 = temp_df[, grep("\\.4$", colnames(temp_df))],
                               MCAR_df_5 = temp_df[, grep("\\.5$", colnames(temp_df))])
  }
  
  return(MCAR_dfs_list)
  
}

Imputed_Dataframes_MCAR <- create_MCAR_dfs(MCAR_imputed)


# MAR DATASETS ##################

#imputes missing data using 'complete' function
MAR_imputed <- furrr::future_map(mbased_finite_apollo$MAR, ~ complete(.x, action = "broad"))

#Creates data frames from imputed data MAR
create_MAR_dfs <- function(MAR_imputed){
  
  MAR_dfs_list <- list()
  
  for(i in seq_along(MAR_imputed)){
    temp_df <- MAR_imputed[[i]]
    MAR_dfs_list[[i]] <- list(MAR_df_1 = temp_df[, grep("\\.1$", colnames(temp_df))],
                               MAR_df_2 = temp_df[, grep("\\.2$", colnames(temp_df))],
                               MAR_df_3 = temp_df[, grep("\\.3$", colnames(temp_df))],
                               MAR_df_4 = temp_df[, grep("\\.4$", colnames(temp_df))],
                               MAR_df_5 = temp_df[, grep("\\.5$", colnames(temp_df))])
  }
  
  return(MAR_dfs_list)
  
}

Imputed_Dataframes_MAR <- create_MAR_dfs(MAR_imputed)

################ SOCIAL NETWORK ANALYSIS (PREFERABLE REM) #######################

############# build the real Apollo Network
edges<-data.frame(from=c(as.character(PartOfApollo_13[,2])),to=c(as.character(PartOfApollo_13[,3])))

Apollo<-graph_from_data_frame(edges,directed = TRUE)
co <- components(Apollo)
Apollo_network <- induced.subgraph(Apollo, which(co$membership == which.max(co$csize))) #use only the largest component for analysis
summary(Apollo_network)

#function to visualize the real network (with interaction)
set.seed(100)
Apollo_interactive_layout<-visNetwork(data.frame(id=V(Apollo_network)$name), edges, main = "Apollo",submain="Can zoom in/out to check the IDs and ties") %>%
  visIgraphLayout(layout = "layout_nicely",smooth =  FALSE) %>%
  visNodes(shape="circle",label = TRUE) %>% 
  visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)

Apollo_interactive_layout 

########## calculate centrality measures

#function to calculate centrality metrics
find_highest_centrality <- function(graph){
  
  # highest degree
  degree <- degree(graph, mode = "all")
  node_degree <- V(graph)$name[which.max(degree)]
  
  # highest betweenness
  betweenness <- betweenness(graph, normalized = TRUE)
  node_betweenness <- V(graph)$name[which.max(betweenness)]
  
  # highest closeness
  closeness <- closeness(graph, mode = "all")
  node_closeness <- V(graph)$name[which.max(closeness)]
  
  # highest eigenvector
  eigen_centrality <- eigen_centrality(graph)$vector
  node_eigen <- V(graph)$name[which.max(eigen_centrality)]
  
  # combine results
  cat("highest degree is node: ", node_degree, "\n")
  cat("highest betweenness is node: ", node_betweenness, "\n")
  cat("highest closeness is node: ", node_closeness, "\n")
  cat("highest eigenvector is node: ", node_eigen, "\n")
}

find_highest_centrality(Apollo_network)

############# Make variable inertia 

#calculate inertia 
inertia <- inertiaStat(PartOfApollo_13, PartOfApollo_13$time, PartOfApollo_13$sender, 
            PartOfApollo_13$receiver, halflife = 10)

#add variable to apollo dataframe
PartOfApollo_13$inertia <- inertia


############ first rem analyis

Apollo1 <- rem.dyad(PartOfApollo_13,n=16, effects = c("inertia"), ordinal =
                       TRUE, hessian = TRUE)

################ POOL THE ANALYSIS ############################################

##################################END###############################################
