indegreeSender <- statsObject_imp[,,2]
outdegreeReceiver <- statsObject_imp[,,3]
recip.vector <- c(reciprocity)
combined$reciprocity <- recip.vector
indegSen.vector <- c(indegreeSender)
combined$indegreeSender <- indegSen.vector
outRec.vector <- c(outdegreeReceiver)
combined$outdegreeReceiver <- outRec.vector
combined$status <- as.integer(as.logical(combined$status))
return(combined)
}
# prepare the data for the cox model
st <- Sys.time()
MCAR_finite_imp <- MCAR_finite %>%
map(~.x %>% # for every simulated multiple imputation....
complete("all") %>% # create a list of completed data sets
map(~.x %>% # GV: changed into regular pipe - for every completed data set....
rem_function() %>% # GV: removed .x - remify the imputed set
cox_sets_function(apollo_data=PartOfApollo_13))) # create the sets for cox model
Sys.time() - st
cox_sets_function <- function(statsObject_imp, apollo_data) {
# take the single riskset
risk_sets <- attr(statsObject_imp, "riskset")
# remove the id column
risk_sets <- risk_sets %>% select(-'id')
# creating one set with all risksets for each time point
combined <- merge(risk_sets, apollo_data$time, by=NULL)
# rename column time
combined <- combined %>%
rename(
time = y)
# ordering combined dataset
col_order <- c("time", "sender", "receiver")
combined <- combined[, col_order]
# recoding classes of the variables to match in both datasets
combined$sender <- as.numeric(combined$sender)
combined$receiver <- as.numeric(combined$receiver)
combined$status <- do.call(paste0, combined) %in%
do.call(paste0, apollo_data)
##### manually fixing entries that should have status FALSE
# 1
combined$status[combined$time == 44258.8 &
combined$sender == "1" &
combined$receiver == "17" ] <- FALSE
# 2
combined$status[combined$time == 44263.8 &
combined$sender == "1" &
combined$receiver == "17" ] <- FALSE
# 3
combined$status[combined$time == 44272.8 &
combined$sender == "1" &
combined$receiver == "17" ] <- FALSE
# 4
combined$status[combined$time == 49753.8 &
combined$sender == "1" &
combined$receiver == "17" ] <- FALSE
# 5
combined$status[combined$time == 49758.8 &
combined$sender == "1" &
combined$receiver == "17" ] <- FALSE
#combining the dataset with riskset to the statistic
reciprocity <- statsObject_imp[,,1]
indegreeSender <- statsObject_imp[,,2]
outdegreeReceiver <- statsObject_imp[,,3]
recip.vector <- c(reciprocity)
combined$reciprocity <- recip.vector
indegSen.vector <- c(indegreeSender)
combined$indegreeSender <- indegSen.vector
outRec.vector <- c(outdegreeReceiver)
combined$outdegreeReceiver <- outRec.vector
combined$status <- as.integer(as.logical(combined$status))
return(combined)
}
# prepare the data for the cox model
st <- Sys.time()
MCAR_finite_imp <- MCAR_finite %>%
map(~.x %>% # for every simulated multiple imputation....
complete("all") %>% # create a list of completed data sets
map(~.x %>% # GV: changed into regular pipe - for every completed data set....
rem_function() %>% # GV: removed .x - remify the imputed set
cox_sets_function(apollo_data=PartOfApollo_13))) # create the sets for cox model
st <- Sys.time()
MCAR_finite_imp <- MCAR_finite %>%
map(~.x %>% # for every simulated multiple imputation....
complete("all") %>% # create a list of completed data sets
map(~.x %>% # GV: changed into regular pipe - for every completed data set....
rem_function() %>% # GV: removed .x - remify the imputed set
cox_sets_function(apollo_data=PartOfApollo_13))) # create the sets for cox model
Sys.time() - st
table(combined$status, combined$statuss)
library(mice, warn.conflicts = FALSE)
require(lattice)
library(tidyverse)
library(magrittr)
library(dplyr)
library(purrr)
library(furrr)
library(relevent)
library(broom.mixed)
library(rem)
library(ggplot2)
library(survival)
library(remify)
library(remstats)
library(devtools)
#library(remstimate)
library(tibble)
# set working directory to be the current directory
# GV 4/6/23: Not necessary, because I created a Project
#cur_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
#setwd(cur_dir)
## 1. Read the data
load("UUsummerschool.Rdata")
rm(Twitter_data_rem3, WTCPoliceCalls, ClassIntercept, ClassIsFemale,
ClassIsTeacher, WTCPoliceIsICR, Class)
## 2. Ampute and then impute the data
# renaming dataset for later convenience
apollo.renamed <- PartOfApollo_13
apollo.renamed <- apollo.renamed %>%
rename(
actor1 = sender,
actor2 = receiver
)
# making the dataset a tibble
apollo.renamed <- as_tibble(apollo.renamed)
# determine which column to condition on
whichcol <- c("", "actor2", "actor1")
names(whichcol) <- colnames(apollo.renamed)
# create predictor matrix for imoutations
pred <- make.predictorMatrix(apollo.renamed)
pred[ ,"time"] <- 0
pred
# use the custom pmm method
method <- make.method(apollo.renamed)
method[c(2,3)] <- "pmm.conditional"
MCAR_finite <- furrr::future_map(1:100, ~ { # map over 100 sims
apollo.renamed %>%
ampute(prop = .2,
patterns = c(1,0,1),
mech = "MCAR") %>% .$amp %>%
mice(m = 5,
maxit = 5,
method = method,
pred=pred,
whichcolumn = whichcol,
print = F)
}, .options = furrr_options(seed = 123))
# check if it is correct
MCAR_finite |> map(~.x %>%
complete("long") |>
summarize(all(actor1 != actor2)))
# creating functions
# Define effects
effects <- ~ -1 + reciprocity(scaling = ("std")) +
indegreeSender() + outdegreeReceiver()
# function to remify each imputed dataset
rem_function <- function(data) {
# Perform the analysis as before
reh <- remify::remify(edgelist = data, model = "tie")
statsObject_imp <- remstats(reh = reh, tie_effects = effects)
# Return the fit
return(statsObject_imp)
}
# function to create a dataset for the cox model
cox_sets_function <- function(statsObject_imp, apollo_data) {
# take the single riskset
risk_sets <- attr(statsObject_imp, "riskset")
# remove the id column
risk_sets <- risk_sets %>% select(-'id')
# creating one set with all risksets for each time point
combined <- merge(risk_sets, apollo_data$time, by=NULL)
# rename column time
combined <- combined %>%
rename(
time = y)
# ordering combined dataset
col_order <- c("time", "sender", "receiver")
combined <- combined[, col_order]
# recoding classes of the variables to match in both datasets
# GV: Much faster:
combined$sender <- as.numeric(combined$sender)
combined$receiver <- as.numeric(combined$receiver)
diff <- apollo_data[rep(seq_len(nrow(apollo_data)), each = 240), ] %>%
data.matrix() %>%
.[, 1:3] - combined
combined$status <-
rowSums(diff == 0) == ncol(diff)
#combining the dataset with riskset to the statistic
reciprocity <- statsObject_imp[,,1]
indegreeSender <- statsObject_imp[,,2]
outdegreeReceiver <- statsObject_imp[,,3]
recip.vector <- c(reciprocity)
combined$reciprocity <- recip.vector
indegSen.vector <- c(indegreeSender)
combined$indegreeSender <- indegSen.vector
outRec.vector <- c(outdegreeReceiver)
combined$outdegreeReceiver <- outRec.vector
combined$status <- as.integer(as.logical(combined$status))
return(combined)
}
# prepare the data for the cox model
st <- Sys.time()
MCAR_finite_imp <- MCAR_finite %>%
map(~.x %>% # for every simulated multiple imputation....
complete("all") %>% # create a list of completed data sets
map(~.x %>% # GV: changed into regular pipe - for every completed data set....
rem_function() %>% # GV: removed .x - remify the imputed set
cox_sets_function(apollo_data=PartOfApollo_13))) # create the sets for cox model
MCAR_finite
usethis::edit_r_environ()
Sys.getenv()
install.packages("rmarkdown")
install.packages("rmarkdown")
load("~/surfdrive/Werk/GitHub/ADS-Missing-data-social-network/Gerko/Simulation_Vira/Simulation_Vira_cache/html/coxmodels2_e3dc56195b3820a6499968ee072b4918.RData")
ls
ls()
load("~/surfdrive/Werk/GitHub/ADS-Missing-data-social-network/Gerko/Simulation_Vira/Simulation_Vira_cache/html/coxmodels2_e3dc56195b3820a6499968ee072b4918.rdb")
library(mice, warn.conflicts = FALSE)
require(lattice)
library(tidyverse)
library(magrittr)
library(dplyr)
library(purrr)
library(furrr)
library(relevent)
library(broom.mixed)
library(rem)
library(ggplot2)
library(survival)
library(remify)
library(remstats)
library(devtools)
#library(remstimate)
library(tibble)
# set working directory to be the current directory
# GV 4/6/23: Not necessary, because I created a Project
#cur_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
#setwd(cur_dir)
## 1. Read the data
load("UUsummerschool.Rdata")
rm(Twitter_data_rem3, WTCPoliceCalls, ClassIntercept, ClassIsFemale,
ClassIsTeacher, WTCPoliceIsICR, Class)
## 2. Ampute and then impute the data
# renaming dataset for later convenience
apollo.renamed <- PartOfApollo_13
apollo.renamed <- apollo.renamed %>%
rename(
actor1 = sender,
actor2 = receiver
)
# making the dataset a tibble
apollo.renamed <- as_tibble(apollo.renamed)
# determine which column to condition on
whichcol <- c("", "actor2", "actor1")
names(whichcol) <- colnames(apollo.renamed)
# create predictor matrix for imoutations
pred <- make.predictorMatrix(apollo.renamed)
pred[ ,"time"] <- 0
pred
# use the custom pmm method
method <- make.method(apollo.renamed)
method[c(2,3)] <- "pmm.conditional"
#### set with sufficient actors & dyads
set.seed(123) # fix seed to realize a sufficient set
indic <- sample(1:nrow(apollo.renamed), 1500)
remify(apollo.renamed[indic, ], model = "tie") %>% dim()
#### Combine the sufficient set and the incomplete set
make_missing <- function(x, indic){
sufficient <- x[indic, ]
miss <- x[-c(indic), ] |>
ampute(prop = .2,
mech = "MCAR",
patterns = c(1,0,1)) %>%
.$amp
combined <- rbind(sufficient,
miss)
return(combined[order(combined$time), ]) # sort it all like apollo
}
MCAR_finite <- furrr::future_map(1:100, ~ { # map over 100 sims
apollo.renamed %>%
make.missing(., indic) %>%
mice(m = 5,
maxit = 5,
method = method,
pred=pred,
whichcolumn = whichcol,
print = F)
}, .options = furrr_options(seed = 123))
library(mice, warn.conflicts = FALSE)
require(lattice)
library(tidyverse)
library(magrittr)
library(dplyr)
library(purrr)
library(furrr)
library(relevent)
library(broom.mixed)
library(rem)
library(ggplot2)
library(survival)
library(remify)
library(remstats)
library(devtools)
#library(remstimate)
library(tibble)
# set working directory to be the current directory
# GV 4/6/23: Not necessary, because I created a Project
#cur_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
#setwd(cur_dir)
## 1. Read the data
load("UUsummerschool.Rdata")
rm(Twitter_data_rem3, WTCPoliceCalls, ClassIntercept, ClassIsFemale,
ClassIsTeacher, WTCPoliceIsICR, Class)
## 2. Ampute and then impute the data
# renaming dataset for later convenience
apollo.renamed <- PartOfApollo_13
apollo.renamed <- apollo.renamed %>%
rename(
actor1 = sender,
actor2 = receiver
)
# making the dataset a tibble
apollo.renamed <- as_tibble(apollo.renamed)
# determine which column to condition on
whichcol <- c("", "actor2", "actor1")
names(whichcol) <- colnames(apollo.renamed)
# create predictor matrix for imoutations
pred <- make.predictorMatrix(apollo.renamed)
pred[ ,"time"] <- 0
pred
# use the custom pmm method
method <- make.method(apollo.renamed)
method[c(2,3)] <- "pmm.conditional"
#### set with sufficient actors & dyads
set.seed(123) # fix seed to realize a sufficient set
indic <- sample(1:nrow(apollo.renamed), 1500)
remify(apollo.renamed[indic, ], model = "tie") %>% dim()
#### Combine the sufficient set and the incomplete set
make_missing <- function(x, indic){
sufficient <- x[indic, ]
miss <- x[-c(indic), ] |>
ampute(prop = .2,
mech = "MCAR",
patterns = c(1,0,1)) %>%
.$amp
combined <- rbind(sufficient,
miss)
return(combined[order(combined$time), ]) # sort it all like apollo
}
MCAR_finite <- furrr::future_map(1:100, ~ { # map over 100 sims
apollo.renamed %>%
make_missing(., indic) %>%
mice(m = 5,
maxit = 5,
method = method,
pred=pred,
whichcolumn = whichcol,
print = F)
}, .options = furrr_options(seed = 123))
#GV: NOT RUN
# check if it is correct
# MCAR_finite |> map(~.x %>%
#   complete("long") |>
#   summarize(all(actor1 != actor2)))
check if it is correct
MCAR_finite |> map(~.x %>%
complete("long") |>
summarize(all(actor1 != actor2)))
# creating functions
# Define effects
effects <- ~ -1 + reciprocity(scaling = ("std")) +
indegreeSender() + outdegreeReceiver()
# function to remify each imputed dataset
#GV more efficient, because no storage
rem_function <- function(data) {
# Perform the analysis as before
remify::remify(edgelist = data, model = "tie") %>%
remstats(tie_effects = effects)
}
# function to create a dataset for the cox model
cox_sets_function <- function(statsObject_imp, apollo_data) {
# take the single riskset
# remove the id column
risk_sets <- attr(statsObject_imp, "riskset") %>% select(-'id')
# creating one set with all risksets for each time point
combined <- merge(risk_sets, apollo_data$time, by=NULL)  %>%
rename(time = y) %>%
.[, c("time", "sender", "receiver")] %>%
mutate(sender = as.numeric(sender),
receiver = as.numeric(receiver))
# GV: Calculate divergence
diff <- apollo_data[rep(seq_len(nrow(apollo_data)), each = 240), ] %>%
data.matrix() %>%
.[, 1:3] - combined
# GV: identify non-divergence
combined$status <-
rowSums(diff == 0) == ncol(diff)
#combining the dataset with riskset to the statistic
reciprocity <- statsObject_imp[,,1]
indegreeSender <- statsObject_imp[,,2]
outdegreeReceiver <- statsObject_imp[,,3]
recip.vector <- c(reciprocity)
combined$reciprocity <- recip.vector
indegSen.vector <- c(indegreeSender)
combined$indegreeSender <- indegSen.vector
outRec.vector <- c(outdegreeReceiver)
combined$outdegreeReceiver <- outRec.vector
combined$status <- as.integer(as.logical(combined$status))
return(combined)
}
# prepare the data for the cox model
t1 <- Sys.time()
cox.models.sims <- MCAR_finite[1:10] %>%
map(~.x %>% # for every simulated multiple imputation....
complete("all") %>% # create a list of completed data sets
map(~.x %>% # GV: changed into regular pipe - for every completed data set....
rem_function() %>% # GV: removed .x - remify the imputed set
cox_sets_function(apollo_data=PartOfApollo_13) %$%
coxph(Surv(time, status) ~
reciprocity +
indegreeSender +
outdegreeReceiver)) %>%
pool(custom.t = ".data$b + .data$b / .data$m") %>% # pool coefficients
.$pooled %>% # extract table of pooled coefficients
mutate(true = true, # add true
df = m-1,  # correct df
riv = Inf, # correct riv
std.error = sqrt(t), # standard error
statistic = estimate / std.error, # test statistic
p.value = 2 * (pt(abs(statistic),
pmax(df, 0.001),
lower.tail = FALSE)), # correct p.value
`2.5 %` = estimate - qt(.975, df) * std.error, # lower bound CI
`97.5 %` = estimate + qt(.975, df) * std.error, # upper bound CI
cov = `2.5 %` < true & true < `97.5 %`, # coverage
bias = estimate - true) %>% # bias
select(term, m, true, estimate, std.error, statistic, p.value,
riv, `2.5 %`, `97.5 %`, cov, bias) %>%
column_to_rownames("term")) # create the sets for cox model
######################### cox model on complete data #########################
# Prepare event history
true.reh <- remify(edgelist = apollo.renamed,
model = "tie")
# calculate stats
stats <- remstats(tie_effects = effects,
reh = true.reh)
# use the function to create the correct format of the dataframe
true.cox.set <- cox_sets_function(stats, PartOfApollo_13)
# fit cox model
true.cox.fit <- coxph(Surv(time, status) ~ reciprocity + indegreeSender +
outdegreeReceiver,
data=true.cox.set)
true <- coefficients(true.cox.fit)
# prepare the data for the cox model
t1 <- Sys.time()
cox.models.sims <- MCAR_finite[1:10] %>%
map(~.x %>% # for every simulated multiple imputation....
complete("all") %>% # create a list of completed data sets
map(~.x %>% # GV: changed into regular pipe - for every completed data set....
rem_function() %>% # GV: removed .x - remify the imputed set
cox_sets_function(apollo_data=PartOfApollo_13) %$%
coxph(Surv(time, status) ~
reciprocity +
indegreeSender +
outdegreeReceiver)) %>%
pool(custom.t = ".data$b + .data$b / .data$m") %>% # pool coefficients
.$pooled %>% # extract table of pooled coefficients
mutate(true = true, # add true
df = m-1,  # correct df
riv = Inf, # correct riv
std.error = sqrt(t), # standard error
statistic = estimate / std.error, # test statistic
p.value = 2 * (pt(abs(statistic),
pmax(df, 0.001),
lower.tail = FALSE)), # correct p.value
`2.5 %` = estimate - qt(.975, df) * std.error, # lower bound CI
`97.5 %` = estimate + qt(.975, df) * std.error, # upper bound CI
cov = `2.5 %` < true & true < `97.5 %`, # coverage
bias = estimate - true) %>% # bias
select(term, m, true, estimate, std.error, statistic, p.value,
riv, `2.5 %`, `97.5 %`, cov, bias) %>%
column_to_rownames("term")) # create the sets for cox model
Sys.time() - t1
cox.models.sims
cox.models.sims2 <- MCAR_finite[11:20] %>%
map(~.x %>% # for every simulated multiple imputation....
complete("all") %>% # create a list of completed data sets
map(~.x %>% # GV: changed into regular pipe - for every completed data set....
rem_function() %>% # GV: removed .x - remify the imputed set
cox_sets_function(apollo_data=PartOfApollo_13) %$%
coxph(Surv(time, status) ~
reciprocity +
indegreeSender +
outdegreeReceiver)) %>%
pool(custom.t = ".data$b + .data$b / .data$m") %>% # pool coefficients
.$pooled %>% # extract table of pooled coefficients
mutate(true = true, # add true
df = m-1,  # correct df
riv = Inf, # correct riv
std.error = sqrt(t), # standard error
statistic = estimate / std.error, # test statistic
p.value = 2 * (pt(abs(statistic),
pmax(df, 0.001),
lower.tail = FALSE)), # correct p.value
`2.5 %` = estimate - qt(.975, df) * std.error, # lower bound CI
`97.5 %` = estimate + qt(.975, df) * std.error, # upper bound CI
cov = `2.5 %` < true & true < `97.5 %`, # coverage
bias = estimate - true) %>% # bias
select(term, m, true, estimate, std.error, statistic, p.value,
riv, `2.5 %`, `97.5 %`, cov, bias) %>%
column_to_rownames("term")) # create the sets for cox model
cox.models.sims2
